AggregateError: ‹class AggregateError extends Error {}›,
Array: ‹class Array {}›,
ArrayBuffer: ‹class ArrayBuffer {}›,
AsyncDisposableStack: undefined,
Atomics: {
  add: ‹ƒ (){[native code]}›,
  and: ‹ƒ (){[native code]}›,
  compareExchange: ‹ƒ (){[native code]}›,
  exchange: ‹ƒ (){[native code]}›,
  isLockFree: ‹ƒ (){[native code]}›,
  load: ‹ƒ (){[native code]}›,
  or: ‹ƒ (){[native code]}›,
  notify: ‹ƒ (){[native code]}›,
  store: ‹ƒ (){[native code]}›,
  sub: ‹ƒ (){[native code]}›,
  wait: ‹ƒ (){[native code]}›,
  wake: ‹ƒ (){[native code]}›,
  xor: ‹ƒ (){[native code]}›
},
BigInt: ‹class BigInt {}›,
BigInt64Array: ‹class BigInt64Array extends TypedArray {}›,
BigUint64Array: ‹class BigUint64Array extends TypedArray {}›,
Boolean: ‹class Boolean {}›,
DataView: ‹class DataView {}›,
Date: ‹class Date {}›,
DisposableStack: undefined,
Error: ‹class Error {}›,
EvalError: ‹class EvalError extends Error {}›,
FinalizationRegistry: ‹class FinalizationRegistry {}›,
Float32Array: ‹class Float32Array extends TypedArray {}›,
Float64Array: ‹class Float64Array extends TypedArray {}›,
Int16Array: ‹class Int16Array extends TypedArray {}›,
Int32Array: ‹class Int32Array extends TypedArray {}›,
Int8Array: ‹class Int8Array extends TypedArray {}›,
JSON: {
  parse: ‹ƒ (){[native code]}›,
  stringify: ‹ƒ (){[native code]}›
},
Map: ‹class Map {}›,
Math: {
  abs: ‹ƒ (){[native code]}›,
  acos: ‹ƒ (){[native code]}›,
  acosh: ‹ƒ (){[native code]}›,
  asin: ‹ƒ (){[native code]}›,
  asinh: ‹ƒ (){[native code]}›,
  atan: ‹ƒ (){[native code]}›,
  atanh: ‹ƒ (){[native code]}›,
  atan2: ‹ƒ (){[native code]}›,
  cbrt: ‹ƒ (){[native code]}›,
  ceil: ‹ƒ (){[native code]}›,
  clz32: ‹ƒ (){[native code]}›,
  cos: ‹ƒ (){[native code]}›,
  cosh: ‹ƒ (){[native code]}›,
  exp: ‹ƒ (){[native code]}›,
  expm1: ‹ƒ (){[native code]}›,
  floor: ‹ƒ (){[native code]}›,
  fround: ‹ƒ (){[native code]}›,
  hypot: ‹ƒ (){[native code]}›,
  idiv: ‹ƒ (){[native code]}›,
  imod: ‹ƒ (){[native code]}›,
  imul: ‹ƒ (){[native code]}›,
  imuldiv: ‹ƒ (){[native code]}›,
  irandom: ‹ƒ (){[native code]}›,
  irem: ‹ƒ (){[native code]}›,
  log: ‹ƒ (){[native code]}›,
  log1p: ‹ƒ (){[native code]}›,
  log10: ‹ƒ (){[native code]}›,
  log2: ‹ƒ (){[native code]}›,
  max: ‹ƒ (){[native code]}›,
  min: ‹ƒ (){[native code]}›,
  mod: ‹ƒ (){[native code]}›,
  pow: ‹ƒ (){[native code]}›,
  random: ‹ƒ (){[native code]}›,
  round: ‹ƒ (){[native code]}›,
  sign: ‹ƒ (){[native code]}›,
  sin: ‹ƒ (){[native code]}›,
  sinh: ‹ƒ (){[native code]}›,
  sqrt: ‹ƒ (){[native code]}›,
  tan: ‹ƒ (){[native code]}›,
  tanh: ‹ƒ (){[native code]}›,
  trunc: ‹ƒ (){[native code]}›,
  E: undefined,
  LN10: undefined,
  LN2: undefined,
  LOG10E: undefined,
  LOG2E: undefined,
  PI: undefined,
  SQRT1_2: undefined,
  SQRT2: undefined
},
ModuleSource: ‹class ModuleSource {}›,
Number: ‹class Number {}›,
Object: ‹class Object {}›,
Promise: ‹class Promise {}›,
Proxy: ‹ƒ (){[native code]}›,
RangeError: ‹class RangeError extends Error {}›,
ReferenceError: ‹class ReferenceError extends Error {}›,
Reflect: {
  apply: ‹ƒ (){[native code]}›,
  construct: ‹ƒ (){[native code]}›,
  defineProperty: ‹ƒ (){[native code]}›,
  deleteProperty: ‹ƒ (){[native code]}›,
  get: ‹ƒ (){[native code]}›,
  getOwnPropertyDescriptor: ‹ƒ (){[native code]}›,
  getPrototypeOf: ‹ƒ (){[native code]}›,
  has: ‹ƒ (){[native code]}›,
  isExtensible: ‹ƒ (){[native code]}›,
  ownKeys: ‹ƒ (){[native code]}›,
  preventExtensions: ‹ƒ (){[native code]}›,
  set: ‹ƒ (){[native code]}›,
  setPrototypeOf: ‹ƒ (){[native code]}›
},
RegExp: ‹class RegExp {}›,
Set: ‹class Set {}›,
SharedArrayBuffer: ‹class SharedArrayBuffer {}›,
String: ‹class String {}›,
SuppressedError: ‹class SuppressedError extends Error {}›,
Symbol: ‹class Symbol {}›,
SyntaxError: ‹class SyntaxError extends Error {}›,
TypeError: ‹class TypeError extends Error {}›,
TypedArray: ‹class TypedArray {}›,
URIError: ‹class URIError extends Error {}›,
Uint16Array: ‹class Uint16Array extends TypedArray {}›,
Uint32Array: ‹class Uint32Array extends TypedArray {}›,
Uint8Array: ‹class Uint8Array extends TypedArray {}›,
Uint8ClampedArray: ‹class Uint8ClampedArray extends TypedArray {}›,
WeakMap: ‹class WeakMap {}›,
WeakRef: ‹class WeakRef {}›,
WeakSet: ‹class WeakSet {}›,
decodeURI: ‹ƒ (){[native code]}›,
decodeURIComponent: ‹ƒ (){[native code]}›,
encodeURI: ‹ƒ (){[native code]}›,
encodeURIComponent: ‹ƒ (){[native code]}›,
escape: ‹ƒ (){[native code]}›,
isFinite: ‹ƒ (){[native code]}›,
isNaN: ‹ƒ (){[native code]}›,
parseFloat: ‹ƒ (){[native code]}›,
parseInt: ‹ƒ (){[native code]}›,
trace: ‹ƒ (){[native code]}›,
unescape: ‹ƒ (){[native code]}›,
Infinity: Infinity,
NaN: NaN,
undefined: undefined,
Compartment: ‹class Compartment {}›,
Function: ‹class Function {}›,
eval: ‹ƒ (){[native code]}›,
setImmediate: ‹ƒ (){[native code]}›,
gc: ‹ƒ (){[native code]}›,
print: ‹ƒ (){[native code]}›,
issueCommand: ‹ƒ (){[native code]}›,
performance: {
  now: ‹ƒ (){[native code]}›
},
currentMeterLimit: ‹ƒ (){[native code]}›,
resetMeter: ‹ƒ (){[native code]}›,
TextDecoder: ‹class TextDecoder {}›,
TextEncoder: ‹class TextEncoder {}›,
Base64: {
  encode: ‹ƒ (){[native code]}›,
  decode: ‹ƒ (){[native code]}›
},
harden: ‹ƒ (){[native code]}›

